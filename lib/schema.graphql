type Query {
    "Return all courses"
    getCourses: [Course]
    "Returns one course"
    getCourse(id: ID!): Course

    "Return all students"
    getStudents: [Student]
    "Returns one student"
    getStudent(id: ID!): Student
}

type Mutation {
    "Create course"
    createCourse(input: CourseInput!): Course
    "Edit course"
    editCourse(_id: ID!, input: CourseEditInput): Course
    "Delete course"
    deleteCourse(_id: ID!): Course

    "Create student"
    createStudent(input: StudentInput!): Student
    "Edit student"
    editStudent(_id: ID!, input: StudentEditInput): Student
    "Delete student"
    deleteStudent(_id: ID!): Student

    "Add people to course"
    addPeople(courseID: ID!, personID: ID!): Course
}

type Student {
    _id: ID!
    name: String!
    email: String!
}

type Course {
    _id: ID!
    title: String!
    teacher: String
    description: String!
    topic: String
    people: [Student]
}

input CourseInput {
    title: String!
    teacher: String
    description: String!
    topic: String
}

input CourseEditInput {
    title: String
    teacher: String
    description: String
    topic: String
}

input StudentInput {
    name: String!
    email: String!
}

input StudentEditInput {
    name: String
    email: String
}